2018/12/7
复习 
复杂查询
聚合查询/分组查询
COUNT(*)   计算数量
SUM()      计算求和
AVG()       计算平均值	
MAX()/MIN()    计算最大/最小
分组查询 GROUP BY  只能查询聚合函数和分组条件
YEAR() 获取生日中的年份 MONTH()  获取月份

子查询：一个SQL语句的结果作为另一个SQL语句的条件
多表查询 select ename,dname from emp,dept WHERE did=deptID;
内连接      emp INNER JOIN dept WHERE ……
左外连接    emp LEFT JOIN dept ON ……
右外连接    emp RIGHT JOIN dept ON……	 
全连接          左外连接    union（合并相同项） 右外连接
		左外连接    union all （不合并相同项）  右外连接
JS环境：
浏览器：内置的JS解释器
服务器：安装NODEjs，NODEjs有JS解释器
变量：var x; 字母数字下划线 ，开头不能出现数字，不能使用关键字作为变量名
      声明未赋值，结果为undefined;
      声明多个变量 var x=1,y=2,z=3;
常量：固定不变的量，const pi=3.14;

（1）JS数据类型
	分为原始类型和引用类型

	原始类型分为 数值型/字符串型/布尔型/未定义型（undefided）
	/null(和引用类型有关)

	一、数值型  number
	也是分为整型和浮点型
	整型在内存中占四个字节，浮点型占八个字节
	整型分为8进制（0开头）10进制、16进制（0x开头）
	浮点型分为指数型和普通型
	指数型：2.147e9 = 2.147*10^9
	

	二、字符串类型   string 
	特点：数据被引号包含“”，不管是单引号还是双引号。
	！！！查看某一个字符的Unicode编码
	console.log("t".charCodeAt()) 

	三、布尔型BOOL   boolean
	在程序中表示 true(真)  or   false(假)
	常用于“是否”的结果
	isVip  isOnsale（是否在线）  isLogin(是否登录)

	四、未定义型 值=类型undefided  
	声明了一个变量，为赋值结果是 undefided

	五、空型null
	用于引用数据类型

	检测数据类型：
	查看数据类型的函数:typeof() 
	number/string/boolean/undefided/object

（2）  数据类型转换
	一、隐式转换（拼接）
	①数值+字符串————数字转换字符串
			  1+"a"————1a(string)，这个结果是字符串类型 
	②数值+布尔型————布尔型转换成数值，
			  ture转换1 false转成0，这个结果是数值类型
        ③字符串+布尔型————布尔型转换成字符串类型
			  "a"+true————atrue,这个结果是字符串类型
        ④数值+未定义型————NAN Not a Number 不是数字也不是字符串
	⑤布尔型+未定义型————NAN Not a Number 不是数字也不是字符串
	⑥字符串+未定义型——————未定义转换成字符串
	⑦数值+空型——1+null 空型转成了0
	  布尔型+空型—————true+null  布尔型转成了1  空型转0
          字符串+空型——————"a"+null

	优先级：字符串类型>数值类型>布尔类型

	练习：
	var num1=3,num2=true,num3="hello";
	console.log(num1+num2+num3);     //4heool
	console.log(num1+num3+num1);     //3hello3
	console.log(num3+num1+num2);     //heool3true
	
	- * / 运算符转换
	尝试将符号的两端的数据转成数值型(自动调用Number)，并计算结果；如果无法转换，结果就返回“NAN”
	console.log(1-"2");  //减法，字符串转换成数值类型 -1
	console.log(2*"3");  //乘法，字符串转换成数值类型 6
	console.log(3/"2");  //除法，字符串转换成数值类型 1.5

	总结：加号的作用 ①执行加法运算	
		         ②执行字符串的拼接
	
	二、强制转换 （用函数转） 
	强制转换成数值：
		①将任何类型数据转换成数值型
		Number()
		   将任何类型数据转换成数值型，如果被转换的字符串中含有非数字，
		   则返回“NAN”；布尔型会转成数值型 ture=1 false=0;

		②将任何类型转换成整型   parse 解析，转换 
                parseInt()  向下取整1.5 —> 1  1.9—>1
  练习：将以下数据转成整型 “3.5”，“7a” "a2"
  console.log(parseInt(1.5));//1
  console.log(parseInt(1a)); //1
  console.log(parseInt("a2545454")); //nan
  查看数据的开始是否为数字，遇到非数字则返回之前的数字。如果开头是非数字，则返回NAN

		③将任何类型转成浮点型
		parseFalot()
  练习：console.log(parseFalot("1.5a"));   //1.5
	console.log(parseFalot("7.1a"));   //7.1	
	console.log(parseFalot("a2.3"));   //NAN
  
  ①②③都是转数字

	强制转换成字符串：
		④将数据转换成字符串：
		toString()
		var pi=3.14;
		pi.toString()    //写法


3.运算符和表达式
由运算符连接的操作数据，所组成的形式称为表达式
（1）算术运算符
 + - * / % ++ -- 
 % 取余 应用于隔行换色，查看奇数偶数
 ++ 自增   在原来的基础之上加1
 -- 自减   在原来的基础之上减1
var a=2;
//先打印a的值，然后在去自增
console.log(a++);
//先打印a的值，然后在去自减
console.log(a--);
//打印a的值
console.log(a);

var b=5
//先让b的值自增，变成6，然后打印b
console.log(++b);  //6
console.log(b);    //6
练习：
var a=3；
console.log(a++ + ++a )

（2）比较运算符
>  <  >=  <=  ==  !=  ===(全等于)   !===(全不等)
返回的结果是布尔型的值 true false.
== 只是比较两个数据的值是否相同
=== 不仅比较数据的值，还比较两个数据的类型
3>"10"//true
	数字和字符串比较，字符串转成数值型
"3">"10" //true
	两个字符串比较，比较的是Unicode码。
	3 -> 51,
	1 -> 49,
	数字和非数字字符串比较，显示false:
3>"10a"
3<"10a"
3=="10a"
以上结果都是false
NaN和任何的数字比较（> < >= <= == ===）返回false
console.log(NaN!=NaN); 返回true

(3)逻辑运算符
	|| 或者  ： 关联的两个条件只需要满足其一，结果就是true，否则false。
	&& 并且  ： 关联的两个条件都满足，结果就是true，否则false。
	！  非   ： 取反
  逻辑短路
  || 或者 ：当第一个条件为T，就不需要执行第二个条件。
  && 并且 ：当第一个条件为F，就不需要执行第二个条件。
  
  练习：下边的代码是否会报错   （逻辑短路）
	var a=3;
	a>5&&console.log(ename);  //不报错
	a<1||console.log(ename);  //报错 

(4)位运算符
将数据转成二进制在执行运算
1 10 11 100 101 110 111 1000 1001 1010 1100……
二进制转十进制：依次加幂
十进制转二进制：除2取余倒数

计算机底层是二进制，打印出来是十进制
按位与（&） 上下两位比较都是1，结果是1，否则为0                                                           
按位或（|） 上下两位比较其中有一个是1，结果是1，否则为0
按位异或（^） 上下两位相同是0，不同是1
按位右移（>>）删除二进制的最后n位，大概变小到原来的一半
按位左移（<<）在二进制的最后添加0，在原来的基础上变大一倍。
练习：5&9  8|10  6^12
       0101  1000  0110                                                       011   
       1001  1010  1100	                                                      101
（5）赋值运算符
=  +=  -=  *=  /=  %=
 在原来的基础之上进行加减乘除取余
 x+=3  //x=x+3
 x-=3  //x=x-3
 x*=3  //x=x*3

 课后任务：
 （1）复习今天内容，整理思维导图
 （2）练习：
	声明一个变量保存年份，如果是闰年，打印是闰年（逻辑短路）
	闰年判断：4年一个闰年，能被4整除，并且不能被100整除；或者能被400整除。
 （3）创建项目数据库
 （4）预习逻辑结构（if    if……else   if……else嵌套 ）
  
