复习：while（循环条件）{循环体}
dp{循环体}while（循环条件）;
for（初始值;循环条件;循环变化）{循环体}
break/continue
var i=0,sum=0;
do{
i++;
if(i%2==0){
	continue;
}
if(i%5==0){
	break;
}
sum+=i
}
while(i<10)



1.函数：
parseInt（转换整数）()/parseFloat（转换浮点型）()/alert（警示框）()/prompt（提示框）()/Number（转换数值型）()....
分为系统函数和自定义函数
函数(Function)：有时也被称为方法，是一段预定义好的，并可以被反复使用的代码块。
（1）创建普通函数
function  函数名称（）{
	函数体――封装反复使用的代码块
}
调用：函数名称（）
（2）创建带有参数的函数
function 函数名称(参数列表){//形参――用于接收数据
  函数体
}
调用：函数名称(参数列表);//实参――实际传递的数据
参数列表:可以是0个或者是多个，之间用逗号隔开；创建时的参数称为形参（形式上的参数），调用时的参数称为实参（实际的参数），调用的时候，实参的值会按照顺序付给形参。
 形参本质上就是变量。
练习：创建函数getSum，传递1个参数，计算1~任意数字之间的和
练习：创建函数getSum，传递2个参数，打印任意两个年份之间所有的闰年。
(3).带有返回值的函数
return(返回结果,函数执行完所得到的结果)
function 函数名称(参数列表){
	函数体
	return 返回值;	
}
调用：函数名称（参数列表）
return表示函数调用后，返回的结果。
注意：
	如果函数中没有写return或者return后没有任何的值，默认返回undefined。
return后函数体中所有的代码都不会被执行
练习：创建函数getMax,传递2个参数，返回最大值。
练习：创建函数getMax，传递3个参数，返回最大值
练习：创建函数isRun,传递1个参数（年份），返回是否为闰年，是返回true，不是返回false
练习：创建函数getStatus，传递1个参数（订单状态码），返回对应的中文。  1-待付款 2-待发货 3-运输中 4-已签收 5-已取消 其他-无法查询 
（2）作用域
就是变量和函数的可访问范围。
分为全局作用域和局部(函数)作用域
全局作用域：在代码的任何地方都能访问。
局部（函数）作用域：只能在当前函数的内部访问。
（1）变量声明提升
      JS程序执行前，在当前作用域下使用var声明的变量会提升到最前边，但赋值还是在原来的位置
（2）函数提升
       函数和变量一样，在JS程序执行前，把使用function关键字创建的函数提升到最前边。
  注意：如果函数名称和变量名一致，变量会覆盖函数；(先提升函数，再提升变量)
3.递归(了解)
在函数的内部调用自身
递归在使用的时候需要有结束条件，结合return

斐波那契数列
1 1 2 3 5 8 13 21 34...

课后任务：
（1）复习今天内容，整理思维导图
（2）使用递归计算斐波那契数列的第n项
（3）预习js中的对象


变量：内存中存储数据的一片空间
变量的分类?
1.全局变量
var在全局的变量
非严格模式下不带var的变量
a =1；
2.局部变量（权限的问题）
声明在局部作用域
函数的形参
赋值操作的返回值就是等号右边的内容
返回值：return
做几件事？
1.返回函数调用的结果
2.终止当前函数的调用（执行）
何时需要return？
{什么情况产生undefined？
1.声明了变量但是未赋值
2.函数没有return，程序默认返回undefined
3.未指定的实参由undefined按顺序补位（多余的实参会被忽略）}重点

前++和后++的区别
var a=1；
++a
a++
对变量而言：无区别，都会自增1
前++：返回新值（+1之后的值）（结果）
后++：返回后值（+1之前的值）（上一步表达式变量的值）
对表达式而言
核心：全局 局部变量
reture
前++
后++


函数调用需要传入变量作为实参时：
1.值传递：针对原始类型而言
如：String/Number/Boolean等
将原变量的值复制一份作为实参，今后对该实参做的所有操作与原变量无关
2.址传递：针对引用类型而言
如：函数（Function）/对象（Object）/数组等（Array）等